When would you want to use a remote repository rather than keeping all your work local?

	When I work on a project with other people.
	When I want to share my project publicly to other people.

Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?

	To allow me to work on my local copy of a branch without worrying about it being automatically modified by changes made by other people working on the remote repository.

Describe the differences between forks, clones, and branches. When would you use one instead of another?

	Branches allow you to work on different versions of a project while keeping track of changes in each branch separately.
	Clones are local copies of a repository stored in a server.
	Forks are remote repositories that were created based on a copy of another remote repository.

	I would use branches for:
		1- Experimenting new features, etc. without modifying the major branch of a project for merging them later only when fully ready. 
		2- Working independently in two versions of a project that serve different purposes.

	I would use clones for working localy in a project and test it well before pushing changes to the remote, shared repository.

	I would use forks to easily create my own version of a project in GitHub based on someone else's project while giving them credit for their work. This approach would also make it easier for me to suggest changes to the author of the original project. 

What is the benefit of having a copy of the last known state of the remote stored locally?

	It allows the comparison of HEAD with a local copy of the remote to facilitate merging the changes done locally with the changes done in parallel at the remote repository. By using the fetch command it is possible to update the local copy of the remote repository without modifying the files being worked locally.

How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?

	I would try to use a shared folder in the cloud and use some rules to coordinate modifications, such as renaming files using standardized sufixes for signaling that the file is being edited. It would be faster to do simple and infrequent modifications that require coordinating with very few people, but it would be virtually impossible to work with a team on a big project that requires modification of several files at the same time for adding features, etc.


